#!/usr/bin/env python3
# stop_line_detector.py
# Simple orange stop-line detector: looks for wide horizontal orange band near bottom of image.
# Publishes: /stop_line/detected (std_msgs/Bool)

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from std_msgs.msg import Bool
from cv_bridge import CvBridge
import cv2
import numpy as np

class StopLineDetector(Node):
    def __init__(self):
        super().__init__('stop_line_detector')
        self.bridge = CvBridge()
        self.sub = self.create_subscription(Image, '/camera/image_raw', self.image_cb, 1)
        self.pub = self.create_publisher(Bool, '/stop_line/detected', 1)
        # declare parameters
        self.declare_parameters(
            namespace='',
            parameters=[
                ('Hue_low', 7),
                ('Hue_high', 30),
                ('Saturation_low', 90),
                ('Saturation_high', 255),
                ('Value_low', 90),
                ('Value_high', 255),
                ('crop_fraction', 0.6),
                ('detection_threshold', 0.03),
                ('blur_ksize', 7)
            ]
        )

        # get parameters
        hue_low = self.get_parameter('Hue_low').value
        hue_high = self.get_parameter('Hue_high').value
        sat_low = self.get_parameter('Saturation_low').value
        sat_high = self.get_parameter('Saturation_high').value
        val_low = self.get_parameter('Value_low').value
        val_high = self.get_parameter('Value_high').value

        self.hsv_lower = np.array([hue_low, sat_low, val_low])
        self.hsv_upper = np.array([hue_high, sat_high, val_high])
        self.crop_fraction = self.get_parameter('crop_fraction').value
        self.detection_threshold = self.get_parameter('detection_threshold').value
        self.blur_ksize = self.get_parameter('blur_ksize').value

        self.get_logger().info(
            f'StopLineDetector started with HSV=({self.hsv_lower},{self.hsv_upper}), '
            f'crop_fraction={self.crop_fraction}, detection_threshold={self.detection_threshold}, '
            f'blur_ksize={self.blur_ksize}'
        )

    def image_cb(self, msg: Image):
        try:
            img = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        except Exception as e:
            self.get_logger().error(f'cv_bridge error: {e}')
            return

        h, w = img.shape[:2]
        # crop bottom region where stop line appears
        crop = img[int(h*0.6):h, 0:w]
        hsv = cv2.cvtColor(crop, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, self.hsv_lower, self.hsv_upper)
        mask = cv2.medianBlur(mask, 7)
        # compute fraction of pixels in mask
        fraction = np.count_nonzero(mask) / mask.size

        # If a wide orange band exists near bottom, fraction will be significant.
        detected = fraction > 0.03  # tune threshold (3% of cropped area)
        self.pub.publish(Bool(data=bool(detected)))

        # debug logging occasionally
        # self.get_logger().debug(f'stop_line fraction={fraction:.4f} detected={detected}')

def main(args=None):
    rclpy.init(args=args)
    node = StopLineDetector()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()




